Version Notes:
-- v0.1.0 (9/22/14)  -------------------
Initial release. Supports OpenCV on two Playstation Eye cameras at 60fps (ideally), distorted to fit the Oculus Rift DK1. Supports Canny and contour detection.

-- v0.1.1 (9/23/14)  -------------------
Sped up code by quite a bit through refactoring and optimization. Images no longer have alpha channels (another speedup). Added hotplug support for the cameras; they can be plugged in while running but unplugging them causes a crash. Need to investigate. [The hotplug support has since been put on hold -- too much time for a non-issue (12/15/13)]

-- v0.1.2 (9/25/14)  -------------------
Refactored lots of code into the new CVEye class.

-- v0.1.6 (11/25/14) -------------------
Lots of improvements between this iteration and the last one. Wrote them all down somewhere... but I can't remember where. Anyway, I've offloaded YUV422 to RGB color space conversion to another thread using TBB. It needs a lot of optimization, but the potential is there and I already have an appreciable speed gain. I may want to offload this to the GPU through OpenCL. The codebase has been switched over to a 64-bit fork of OpenFrameworks; this allows me to use memory more effectively, and also allowed me to upgrade to the OpenCV 3.0 beta. The project is now faster and more portable for it.

-- v0.2.0 (12/15/14) -------------------
We now use lookup tables for YUV422 computation. I thought I was offloading it to another processor core, but it turns out that it was not (specifying a range of 1 means the process is run on the same core). The cost incurred by actually multithreading the conversion was greater than not using it (for canny); therefore, other optimizations had to be done. The use of lookup tables is one such optimization.
I've begun the development of specialized classes for performance testing (see CVPerformance.h). This will be useful for changing the downsampling rate of OpenCV on the fly for performance reasons.
As always, the program has seen daily work. Perhaps I am optimizing my program prematurely -- this is at the front of my mind as I work. However, it's something I need to be thinking about, as the success of this program depends so much on its performance. My work on color conversion is basically done; I could do some wacky shader business for color conversion rather than using LUTs, but it's fast enough.
OpenCV remains difficult to work with on the GPU. Further development of the libraries should fix the issues I'm having eventually. I need to run some camera calibration to get the camera intrinsics so that I might reduce the cameras' distortion, as it is rather jarring right now.

-- v0.2.2 (12/17/14) -------------------
The program now supports multithreading of contour detection (controlled by "imageSubdivisions" in CVEye.h). Canny and contour detection would be run simultaneously in an ideal implementation, but Canny is currently bugged in this version of OpenCV. It remains that this yields a significant speedup.
I've converted the GUI to a completely new system called AntTweakBar (via ofxTweakBar). The switch was made to get around a bug concerning the old GUI system that couldn't be fixed without some significant development. I've been meaning to switch to this for a while. AntTweakBar is much faster (~200 FPS speedup!), and is much easier to work with. I'm very happy with the result.
The program now displays a test image when cameras are not connected. Operations are performed on this image.
There is currently a bug with AntTweakBar wherein the camera output turns grey when no windows are displayed. This needs fixing very soon.

-- v1.0.0 (2/9/15) ---------------------
I've decided that I probably should have marked the software as 1.0 a while ago, with 1.0 being the deliverable for Capstone 1. I'll be versioning things a little more intelligently from now on.
In this version, the project libraries have been moved so that there are no dependencies outside of the project folder, allowing it to be distributed easily.
I've also implemented a basic camera calibration procedure to counteract lens distortion on-demand.
The PS3 Eye driver code has been updated to the newest version, which includes additional options for framerate targets.
This marks the first version with the 3d-printed mount for the cameras as well. The space between the center of the lenses is at or about 65 millimeters, making the need for IPD adjustment in software reduced or unnecessary, though it is left in.

Bug fixes:
- AntTweakBar no longer causes screen blanking when the GUI windows are all minimized (incidentally fixed by the move to Yosemite)

-- v1.1.0 (2/10/15) ---------------------
In this version, I've added a class for creating and handling disparity maps (StereoDepthMapper). I need to do a lot of research to get it doing something interesting. I've also added a few convenience functions, such as one for drawing OpenCV Mats directly to the screen. Finally, I've refactored the camera calibration code into its own class (CameraCalibrator).

-- v1.1.1 (2/11/15) ---------------------
Finally! I've gotten TBB inside the project folder without the project complaining. This project should truly have no dependencies outside of the main folder right now.

-- v1.1.2 (2/11/15) ---------------------
Working on speeding up the color conversion code again. As it stands it uses 13% of the processor time, and I could really use that 10%. Interestingly enough, my code is faster than OpenCV's code, which is finally fixed (COLOR_YUV2RGB_YUYV was broken in previous betas).

- Why is individual camera fps higher when VSync is on?

-- v1.1.3 (2/17/15) ---------------------
Fixed a few bugs that have been bothering me. The Rift FBOs had issues with drawing at incorrect sizes when distortion was turned on. This is now fixed. OfxTweakbars was throwing initialization errors; suspecting that this had something to do with the bug causing a gray screen when the tweak bars are all minimized on certain platforms (https://github.com/seieibob/OculusEye/issues/2), I've fixed the problem. I haven't been able to test it yet, though.

-- v1.1.4 (2/18/15) ---------------------
Noticed that using the Rift with the program introduced extra VSync, so I'm working on a way to avoid using GLUT's fullscreen, staying in borderless fullscreen. It works, mostly, but there are some quirks I'd like to sort out.
9:22 PM: We now have fully functional borderless fullscreen! We did it! I'm satisfied with this implementation and will be using it instead of default fullscreen going forward.
I've also updated the ofxTweakbar module to better utilize the Help menu.

-- v1.1.5 (2/19/15) ---------------------
I've finally fixed the library issues I've been having. The binaries should now work without any external dependencies.

-- v1.1.6 (3/25/15) ---------------------
Updated to a newer build of OpenCV. This includes a 40-80% speedup for the Canny algorithm, among many other changes.
See https://github.com/Itseez/opencv/pull/3583
It's ambiguous whether this speedup actually applies to OSX or not.

-- v1.2.0 (4/07/15) ---------------------
Refactored camera code into a bundle loaded by the operating system. This results in FPS gains and a more modular codebase; with this we can swap in code to use another camera, such as the PS4 camera.

-- v1.2.1 (4/07/15) ---------------------
This one is much more major than the minor version number suggests. This bundle should now work very well with Unity!

-----------------------------------------



to do:
- Load configuration (programSettings.h) from a text file
- Add a nose
- Use multiplatform threading library in PS3EyeDriver
- Improve performance
- Fix all the bugs
- Fix USB hotplugging to allow for disconnection or at least connection of cameras during run time
- Figure out a fix for horizontal banding in contour output when multithreading
- Try SSE/SIMD instructions for YUV422 conversion (much, much faster)
- Clean up GUI code (use externs rather than duplicate variables)
- Queue loaded frames into a circular buffer
- Fix OpenGL buffer sizing in OfxOculusRift.cpp to resize to fit the window

- Move Data folder into OculusEye.app

optional:
- Integrate PS Move API
- Add microphone support from Eye cameras

done:
- Refactor PS3 Eye driver code into a separate dylib (PS3EyePlugin.bundle)
- Add camera swap support
- Convert from YUV422 to RGB directly (formerly YUV422 -> RGBA -> RGB)
- Refactor eye code (initialization + OpenCV + update + render) into its own class.
- Upgrade to OpenCV 3.0 alpha (upgraded to newest beta)
- Recompile OpenCV with TBB and IPP
- Show placeholder images when the cameras aren't connected
- Write logic for camera calibration
- Show calibration checkerboard on-screen during calibration (remove the need for a printed sheet)

abandoned:
- Reintegrate ofxCocoa (makes this a native OSX application that lives in the tray)
    -> This was more for fun than anything. It wasn't useful and added unneeded complexity to the program.

future:
- Offload initial YUV422 to RGB conversion to Raspberry Pi located on hardware
- Figure out a way to get the video from the Pi to the computer quickly
- Add an IR diffuser to the cameras and remove IR filters from them (improves low-light detection)
